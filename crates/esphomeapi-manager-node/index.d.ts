/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class Light {
  get key(): number
  get name(): string
  get isOn(): boolean
  turnOn(): Promise<void>
  turnOff(): Promise<void>
  toggle(): Promise<void>
}

export declare class Manager {
  static connect(options: ConnectionOptions): Promise<Manager>
  getDeviceName(): string
  getDeviceMac(): string
  getEntities(): Array<Entity>
  getSwitch(key: number): Switch
  getLight(key: number): Light
}

export declare class Switch {
  get key(): number
  get name(): string
  get isOn(): boolean
  turnOn(): Promise<void>
  turnOff(): Promise<void>
  toggle(): Promise<void>
  setState(state: boolean): Promise<void>
}

export interface ConnectionOptions {
  address: string
  port: number
  password?: string
  expectedName?: string
  psk?: string
  clientInfo?: string
  keepAliveDuration?: number
}

export declare function discover(seconds: number): Promise<Array<ServiceInfo>>

export type Entity =
  | { type: 'Light', field0: number }
  | { type: 'Switch', field0: number }
  | { type: 'Sensor', field0: number }

export interface EntityInfo {
  key: number
  name: string
  uniqueId: string
  objectId: string
  deviceClass: string
  disabledByDefault: boolean
  entityCategory: string
  icon: string
}

export interface ServiceInfo {
  tyDomain: string
  subDomain?: string
  fullname: string
  server: string
  addresses: Array<string>
  port: number
  hostTtl: number
  otherTtl: number
  priority: number
  weight: number
}
